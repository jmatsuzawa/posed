README、つーか、メモ

物理的な行指向ではなく、論理的なユニット単位で処理をおこなう po 用のsedである。

sedは行指向のツールだが､言わばメッセージユニット指向のsedである。

* 事前に用語の定義など
- ユニット
ここでは、「ユニット」とはmsgid, msgstrの基本要素とそれに付随するコメント情報をセットとするメッセージの単位である。
たとえば、以下がユニットである。
ユニットの例)
==============================
white-space
#  翻訳者によるコメント (Comment)
#. プログラマーによるコメント (Note)
#: メッセージの出現するソースファイル (Location)
#, フラグ(fuzzyなど) (Flag)
msgid "Source String"
msgstr "Target String"
==============================

- エントリ
ユニットを構成するmsgid、msgstrなどの要素を「エントリ」とここでは呼ぶ。
上記のユニットの例は、
Commentエントリ、
Noteエントリ、
Locationエントリ、
Flagエントリ、
Sourceエントリ(msgid)、
Targetエントリ(msgstr)
で、構成される。


* ツールの説明
物理的な行指向ではなく、論理的なユニット単位で処理をおこなう po 用のsedである。

- 基本的なsedコマンドを実装する
実装するコマンドについては後述。
poでは、ユニットの並び順に意味がないので、sedのマルチライン処理や行の前後関係を意識した機能は実装する予定がない

- アドレス指定が特徴的
sedのアドレス指定とは異なり、エントリ単位でパターン指定をおこなう。
考えかたとしては、Sourceにこのパターンがあって、かつTargetにあのパターンがふくまれるユニットをこう編集する、という感じである。

スクリプトのシンタックスの典型は以下のようになる。
@ENTRY/ADDRESS/!@ENTRY/ADDRESS/!COMMAND

ENTRY:
パターンマッチ対象のエントリーを1文字で指定する。
有効な ENTRY のシンボルは以下のとおり
S: Sourceでマッチ
T: Targetでマッチ
L: Locationでマッチ
F: Flagでマッチ
N: Noteでマッチ
C: Commentでマッチ

ENTRYの指定が無い場合は、Targetが指定されたものとみなす。

ADDRESS:
正規表現のパターン(今のところpythonで使えるものと同等)。
sed では、行番号や範囲でアドレス指定ができるが、このツールでは不要なので実装しない。

COMMAND:

以下のsedコマンドを実装する
(特にd, p, s は最重要なので、サンプルでも実装している)
b
d
p
q
s
t
w
y
:
#

以下は、実装するつもりだが優先度低め
ホールドスペース系。
G
g
H
h
x

以下は、たぶん実装しない。
不要とは言わないがツールとしての用途がまだつかめていない
a
i
r

以下は、実装しないつもり。不要だと考えている。
マルチライン処理系。
(ユースケースがつかめれば実装するかも)
D
N
n
P


ex)
:S:/[Uu]ser/s!ユーザ!ユーザー!g
source(msgid)に'[Uu]ser'を含んで、
